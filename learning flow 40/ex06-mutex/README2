#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <pthread.h>
#include <string.h>
#define BUFFER_SIZE 100
#define MAX_CLIENTS 10

int active_clients = 0;
char buffer_client[BUFFER_SIZE] = {0};

struct client_info {
    int sockfd;
    struct sockaddr_in clientaddr;
    char* current_text;
    pthread_mutex_t mutex_s;
};

void* deal_with_client(void* arg) {

    printf("starting thread\n");
    //check again if the max nb of client has been reached
    if (active_clients>=MAX_CLIENTS) {
        pthread_exit(NULL);
	}

    //get server's info
    struct client_info* c_i = (struct client_info*)arg;

    pthread_mutex_lock(&(c_i->mutex_s)); //start critical region

    active_clients++;

    printf("[server] Client dealt with: %s:%d\n", inet_ntoa(c_i->clientaddr.sin_addr), ntohs(c_i->clientaddr.sin_port));

    //infinite loop until clients stops sending
    while (1) {
        // Send the text back to the client
        int s = sendto(c_i->sockfd, c_i->current_text, strlen(c_i->current_text), 0,
                     (struct sockaddr*)&(c_i->clientaddr), sizeof(struct sockaddr_in));
        if (s < 0) {
            perror("[server] Error: Cannot send text back\n");
            break;
        }
    }

    printf("Client not sending anymore(adress, port:) %s:%d\n", inet_ntoa(c_i->clientaddr.sin_addr), ntohs(c_i->clientaddr.sin_port));
    active_clients--;
    free(c_i);
    free(c_i->current_text);
    pthread_mutex_unlock(&(c_i->mutex_s));//end critical region
    pthread_mutex_destroy(&(c_i->mutex_s));
    pthread_exit(NULL);
}

int main(int argc, char** argv) {


    // Allocate memory and initialize to zero for the array of sockaddr_in.sin_port values
    in_port_t* port_numbers = calloc(MAX_CLIENTS, sizeof(in_port_t));
    if (port_numbers == NULL) {
        printf("\n[server] Error: Failed to allocate memory to port_numbers\n");
        return 1;
    }

    pthread_t* client_threads = calloc(MAX_CLIENTS , sizeof(pthread_t));
    if (client_threads == NULL) {
        printf("\n[server] Error: Failed to allocate memory to port_numbers\n");
        return 1;
    }


    /* check the arguments and load them */
    if (argc < 2) {
        printf("\n[server] Error: Incorrect number of arguments, please enter port number\n");
        return -1;
    }
    int PORT_NUMBER = atoi(argv[1]);  // converts string into int

    /* set the server parameters */
    struct sockaddr_in servaddr;
    memset(&servaddr, '\0', sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(PORT_NUMBER);
    servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    /* create the socket */
    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("[server] Error: Cannot create socket\n");
        return -1;
    }

    /* bind the socket to the server address:listen for incoming packages */
    if (bind(sockfd, (const struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {
        perror("[server] Error: Cannot bind\n");
        return -1;
    }


    //continuously listens for client requests
    while (1) {

        printf("[server] Server listening on port %d\n", PORT_NUMBER);

        struct client_info* c_i = (struct client_info*)calloc(1, sizeof(struct client_info));
        socklen_t clientsize = sizeof(c_i->clientaddr);

        // Receive client connection request
        int len = recvfrom(sockfd, buffer_client, BUFFER_SIZE , 0, (struct sockaddr*)&c_i->clientaddr, &clientsize);
        if (len < 0) {
            perror("[server] Error: Cannot receive connection request\n");
            break;
        }

        //check if the maximum number of clients has been reached
        if (active_clients >= MAX_CLIENTS) {
            printf("[server] Error: Maximum number of clients reached, rejecting new connection request.\n");
            continue;
        }

        // check if it is an old client:
        int i=0;
        int flag=0;
        for ( i = 0; i < MAX_CLIENTS; i++) {
            if (port_numbers[i] == ntohs(c_i->clientaddr.sin_port)) { //not a new client
                flag=1;
                printf("not a new client");
                //check if the message from the old client has changed, update it if necessary
                if ((strcmp(c_i->current_text, buffer_client))!=0) {
                    strcpy(c_i->current_text, buffer_client);
                    printf("changed message for old client");
                }
                break;
            }    
        }   
        
        if (flag==0) { //new client : add it to the list
            i=0;
            for ( i = 0; i < MAX_CLIENTS; i++) {
                if (port_numbers[i] == 0) { //find an empty place
                    port_numbers[i] = ntohs(c_i->clientaddr.sin_port);
                    c_i->current_text = (char*)calloc(BUFFER_SIZE, sizeof(char));
                    strcpy(c_i->current_text, buffer_client);
                    printf("new client's port : %d  added to the list", ntohs(c_i->clientaddr.sin_port));
                    printf("new client storing message : %s", buffer_client);
                    break;
                }
            }
        }

        c_i->sockfd = sockfd;
        
        // Create a thread to deal with the client
        pthread_t client_thread;
        pthread_mutex_t mutex_s = PTHREAD_MUTEX_INITIALIZER;
        c_i->mutex_s = mutex_s;
        if (pthread_create(&client_thread, NULL, deal_with_client, c_i) != 0) {
            perror("[server] Error: Cannot create client thread\n");
            return -1;
        }

        // Add the client thread to the list
        i=0;
        for ( i = 0; i < MAX_CLIENTS; i++) {
            if (client_threads[i] == 0) {
                client_threads[i] = client_thread;
                printf("added new thread to the list");
                break;
            }
        }
    } //end while loop (listening to clients)

    // Wait for all client threads to finish
    int i =0;
    for (i = 0; i < MAX_CLIENTS; i++) {
        if (client_threads[i] != 0) {
            pthread_join(client_threads[i], NULL);
        }
    }

    free(port_numbers);
    free(client_threads);
    close(sockfd);

    return 0;
}